<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Weekly Status | swpd.me]]></title>
  <link href="http://swpd.github.io/blog/categories/weekly-status/atom.xml" rel="self"/>
  <link href="http://swpd.github.io/"/>
  <updated>2013-07-08T00:17:28+08:00</updated>
  <id>http://swpd.github.io/</id>
  <author>
    <name><![CDATA[swpd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 3]]></title>
    <link href="http://swpd.github.io/blog/2013/07/06/gsoc-status-week-3/"/>
    <updated>2013-07-06T11:21:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/07/06/gsoc-status-week-3</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/running_monkey.jpg">
This week I spent most of my time implementing the MariaDB package, it is still
incomplete but I&rsquo;ve pushed it to Github, check <a href="https://github.com/swpd/duda_mariadb">it</a>
out if you are interested.</p>

<p>The problem I am currently stuck is for every continue part of the asynchronous
version MariaDB APIs, we need to pass the <code>ready_status</code>(bitmask of all events
occurred on a MariaDB connection socket) in able to issue the call. However,
the socket event callback functions are spilt into five sepreated functions,
and every function only knows the corresponding event it shall handle but no idea
about all the events available on the MariaDB socket. This makes it more tricky
to write the callback functions right, I need to make sure what events actually
occurs on every stage of a MariaDB&rsquo;s connection lifecycle.</p>

<p>Meanwhile, I am also discussing with Eduardo Silva to see what we can do with it.
He did offer me some useful advinces and will show me some examples later. And
as he recommended, we may add connection pool support to our MariaDB package to
avoid connect-on-demand mechanism.</p>

<p>For the next week, I will keep hard working on making the implementation complete
and integrate it with Duda.</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 2]]></title>
    <link href="http://swpd.github.io/blog/2013/06/30/gsoc-status-week-2/"/>
    <updated>2013-06-30T23:54:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/06/30/gsoc-status-week-2</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/jump_monkey.jpg">
This week I came out with the API draft for Duda MariaDB package, it has been
pushed to Github but is still under development and may be altered later. For your
interest, you can refer to the repository and leave me some comments:
<a href="https://github.com/swpd/duda_mariadb">Duda MariaDB package</a>.</p>

<p>Roughly speaking, the APIs were influenced by the <code>mariasql</code> Node.js package and
the asynchronous access code of <code>redis</code>. Currently there are three header files,
<code>mariadb.h</code> contains event handling functions declaration for MariaDB connection
sockets and some global definitions; <code>connection.h</code> contains code related to
MariaDB client connections, it is responsible for connection management; <code>query.h</code>
takes care of stuffs related to a MariaDB query, every connection can have several
queries, the queries arer linked as a list and will be executed one by one.</p>

<p><a href="http://swpd.github.io/blog/2013/05/18/monkey-http-daemon-internals/">Monkey Internals</a>
was updated this week (composed part of the scheduler section; the command line
utility section was finished), the remaining sections are still under writing.</p>

<p>This week I also moved to my new apartment, everything got settled down and it
is a nice place :D.</p>

<p>For the next week, I will be implementing the APIs and try to put the package into
working.</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 1]]></title>
    <link href="http://swpd.github.io/blog/2013/06/24/gsoc-status-week-1/"/>
    <updated>2013-06-24T11:36:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/06/24/gsoc-status-week-1</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/music_monkey.jpg">
During the first week of GSoC I was investigating the APIs of MariaDB to get myself
familiar with its usages. I had done several experiments with a simple MariaDB
client program which includes connecting database, running queries, fetching results
and preparing SQL statements.</p>

<p>After getting a basic understanding of the MariaDB client library, I moved on to
the asynchronous APIs. There&rsquo;s a <a href="https://kb.askmonty.org/en/using-the-non-blocking-library/">post</a>
explaining how to use non-blocking interfaces with a trivial example. The non-blocking
APIs are modelled after the normal blocking ones, for example the non-blocking
version of <code>mysql_real_query</code> is a couple of functions named <code>mysql_real_query_start</code>
and <code>mysql_real_query_cont</code>.</p>

<p>Besides the official introduction of non-blocking APIs, there&rsquo;s a Node.js package
<code>mariasql</code> that makes use of the non-blocking APIs and serves as a complete reference
of writing a MariaDB driver. I am studying the source code of <code>mariasql</code> and the
<code>redis</code> package of Monkey to see how I can integrate it with the Monkey&rsquo;s event
loop.</p>

<p>For the next week I will focus on designing the basic structures and functions for
Monkey MariaDB package. And the unfinished <a href="http://swpd.github.io/blog/2013/05/18/monkey-http-daemon-internals/">blog entry</a>
discussing about Monkey intervals will continue to be updated from next week
(got a lot of stuffs related to graduation recently).</p>

<!-- more -->

]]></content>
  </entry>
  
</feed>
