<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Monkey | swpd.me]]></title>
  <link href="http://swpd.github.io/blog/categories/monkey/atom.xml" rel="self"/>
  <link href="http://swpd.github.io/"/>
  <updated>2013-08-03T23:02:30+08:00</updated>
  <id>http://swpd.github.io/</id>
  <author>
    <name><![CDATA[swpd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 7]]></title>
    <link href="http://swpd.github.io/blog/2013/08/03/gsoc-status-week-7/"/>
    <updated>2013-08-03T20:32:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/08/03/gsoc-status-week-7</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/monkey_and_elephant.jpg">
This week my effort was mainly focused on developing a web service to demonstrate
usage of the MariaDB package and completing the documentation. You may check it
out <a href="https://github.com/swpd/duda_mariadb_demo">here</a>.</p>

<p>I was also getting myself familiar with the C library APIs of PostgreSQL, the
community comes with comprehensive and clear documentation. For the next couple
days, the documentation website will undoubtedly be my most visited. What&rsquo;s more,
the library comes with native non-blocking support. It rocks, elephant!</p>

<p>This morning I also got an email from Google that announced my successfully pass
of the midterm evaluation. It is an amazing moment and I would like to share with
those that ever helped and guided me.</p>

<p>For the next week, I will get my hands dirty in the Duda PostgreSQL package by
designing the basic data structures and function prototypes.</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 6]]></title>
    <link href="http://swpd.github.io/blog/2013/07/28/gsoc-status-week-6/"/>
    <updated>2013-07-28T00:22:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/07/28/gsoc-status-week-6</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/seal_wins.jpg">
This week the Duda MariaDB package was completed. I spent some time on reimplementing
the connection pooling due to my misunderstanding of it. The new version maintain
a pool of connections that are either connected or connecting. And a pool is
associated with a web service instead of a thread. The pool shall be defined as
global in the web service, but due to the lack of isolate namespace there can&rsquo;t
be same pool names in differenct web services.</p>

<p>The documentation of MariaDB package was also updated to explain the usage of it.
And for those who want to install this package, please refer to the <a href="https://github.com/swpd/monkey">Monkey fork</a>
of my Github. Clone that repo and checkout to mariadb branch, environment needed
to build this package is set up for you. (Notice: you need <code>cmake</code> and <code>libaio</code>
to make things work, so don&rsquo;t forget to install them.) More information can be
found <a href="https://github.com/swpd/duda_mariadb/blob/master/README.md">here</a>.</p>

<p>Currently I am working on an example to demonstrate the usage of this package. It
will be finished very soon.</p>

<p>For next week I will make some potential improvemnts to MariaDB package, start
to review the asynchronous APIs of PostgreSQL and do some experiments.</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 5]]></title>
    <link href="http://swpd.github.io/blog/2013/07/21/gsoc-status-week-5/"/>
    <updated>2013-07-21T19:50:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/07/21/gsoc-status-week-5</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/seal.png">
For the past a few days of this week, I was integrating the source code that required
to build libmysqlclient.a into MariaDB package. Meanwhile I added multiple statements
query support and connection pooling support to MariaDB package. All the features
in my proposal has been implemented and it is happy to announce this package is
coming near to its completion.</p>

<h2>integrate libmysqlclient.a</h2>

<p>It took a bit longer than I expected it would be as MariaDB is such a huge project
(totally 223MiB after extracting). I did spend some time to figure out the relation
of different subparts and picked up those that are really necessary for building
the static library.</p>

<p>The build tools used by MariaDB is <code>cmake</code>, I was not fimiliar with <code>cmake</code> so that
took me some other time to learn some basic usage. I have consulted from
<a href="https://kb.askmonty.org/en/compiling-mariadb-from-source/">blog series</a> of MariaDB
but it did not offer enough information. I turned to more comprehensive
<a href="http://dev.mysql.com/doc/refman/5.7/en/source-installation.html">documentation</a>,
although not all the options are available on MariaDB(such as <code>-DWITH_DEBUG</code>), it
did teach me how to use the same build options used by official MySQL release. (
with option <code>-DCMAKE_CONFIG=mysql_release</code>)</p>

<p>As there are so many build targets, I seeked help on irc #maria and some guy told
me to use <code>make mysqlclient</code> if all I wanted is the client library.</p>

<p>After I got all the missing pieces of the puzzle together, it finally worked out.
I have tested on two other Linux distribution to make sure it was not a pure
accident. :-D (Note: remember to install <code>cmake</code> and <code>libaio</code>)</p>

<!-- more -->


<h2>multiple statements query support</h2>

<p>Multiple statements query allows user to submit a query with serveral statements,
this may lead to SQL injection and should be used carefully.</p>

<p>Using multiple statements query implies after processing there may be several
result sets, and we need to take care of every result sets and make sure it is
freed after used.</p>

<p>I added a new stage to handle next result set if there are more than one.</p>

<h2>connection pooling support</h2>

<p>Connection pooling aims to reduce resource allocation and release overhead. It
was implemented based on the basic part of MariaDB package.</p>

<p>The strategy currently used is to spawn serveal connections for every worker
thread and put them into thread&rsquo;s pool. Once a use require a connection from the
pool, the connection is moved from free queue to busy queue. The connection will
become available again once the user disconnect the connection, it will be returned
to the pool.</p>

<p>There are something I am still discussing with my mentor, we want to make it more
dynamic scalable, thus the pool size may expand when all the connections in the
pool are in use, and shrink the pool size when the usage rate is low.</p>

<p>However, shall we expand the pool size unconditionally? Definitely not, that would
generate resource overhead which against the reason we are using connection pooling.
That&rsquo;s when <code>lower_limit</code> and <code>upper_limit</code> are introduced, we can expand the pool
size if we do not exceed the <code>upper_limit</code> and shrink the pool size if it is still
larger than <code>lower_limit</code>. And there will be a <code>pool_size</code> to configure the initial
size of the pool, all of these will make the pool strategy more flexible.</p>

<h2>plans for next week</h2>

<p>For the next week, I will improve the pool support for MariaDB, write documentation
for this package and an example explaining how to use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 4]]></title>
    <link href="http://swpd.github.io/blog/2013/07/14/gsoc-status-week-4/"/>
    <updated>2013-07-14T19:40:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/07/14/gsoc-status-week-4</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/cool_monkey.png">
This week my time was mostly occupied by completing the MariaDB package. For now,
the basic version of MariaDB package is available, it can happily communicate
with the MariaDB server on my Linux box. I wrote a trivial duda web service to
test some common tasks when dealing with a relational database. During the
implementation and test I did encounter certain bugs, some are very obscure but
thank godness I finally fixed them. The current version is still not the final one,
some APIs may be altered in the future and new features will be introduced into
it. You can retrieve the code <a href="https://github.com/swpd/duda_mariadb">here</a> for
your own interest. :-D</p>

<p>During this week I also discussed some questions I was not sure about with the
guy who implemented the asynchronous APIs for MariaDB(known as knielsen on #maria).
He was nice and answered all my questions in detail. And my mentor, edsiper, who
was busy lately, gave me some advices on how to deal with the duda apis. I wanna
thanks both of them here!</p>

<p>Here are some tasks I will be working on for the next week:</p>

<ul>
<li>write documentation to explain the design and usage of the MariaDB package.</li>
<li>do some code cleanup and fix some potential bugs.</li>
<li>write a more comprehensive example for demonstrating How-To use MariaDB package.</li>
<li>do some survey and try to add connection pool support for the package to reduce
cost of connection setup and release.</li>
<li>add source code of <code>libmariadbclient</code> as a third party dependency because on some
Linux distribution this library may still not come with the asynchronous APIs.</li>
<li>add mutli-statement query support for the package.</li>
</ul>


<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Status: Week 3]]></title>
    <link href="http://swpd.github.io/blog/2013/07/06/gsoc-status-week-3/"/>
    <updated>2013-07-06T11:21:00+08:00</updated>
    <id>http://swpd.github.io/blog/2013/07/06/gsoc-status-week-3</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/running_monkey.jpg">
This week I spent most of my time implementing the MariaDB package, it is still
incomplete but I&rsquo;ve pushed it to Github, check <a href="https://github.com/swpd/duda_mariadb">it</a>
out if you are interested.</p>

<p>The problem I am currently stuck is for every continue part of the asynchronous
version MariaDB APIs, we need to pass the <code>ready_status</code>(bitmask of all events
occurred on a MariaDB connection socket) in able to issue the call. However,
the socket event callback functions are spilt into five sepreated functions,
and every function only knows the corresponding event it shall handle but no idea
about all the events available on the MariaDB socket. This makes it more tricky
to write the callback functions right, I need to make sure what events actually
occurs on every stage of a MariaDB&rsquo;s connection lifecycle.</p>

<p>Meanwhile, I am also discussing with Eduardo Silva to see what we can do with it.
He did offer me some useful advinces and will show me some examples later. And
as he recommended, we may add connection pool support to our MariaDB package to
avoid connect-on-demand mechanism.</p>

<p>For the next week, I will keep hard working on making the implementation complete
and integrate it with Duda.</p>

<!-- more -->

]]></content>
  </entry>
  
</feed>
